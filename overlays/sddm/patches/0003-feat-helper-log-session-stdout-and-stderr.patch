From 6d0b5a35c0abae6d35e616bec04eb9bccb46664d Mon Sep 17 00:00:00 2001
From: "tsrk." <tsrk@tsrk.me>
Date: Sun, 20 Jul 2025 17:18:02 +0200
Subject: [PATCH 3/3] feat(helper): log session stdout and stderr

Signed-off-by: tsrk. <tsrk@tsrk.me>
---
 src/helper/UserSession.cpp | 36 ++++++++++++++++++++++++++----------
 src/helper/UserSession.h   |  5 +++++
 2 files changed, 31 insertions(+), 10 deletions(-)

diff --git a/src/helper/UserSession.cpp b/src/helper/UserSession.cpp
index 860f165..d407d12 100644
--- a/src/helper/UserSession.cpp
+++ b/src/helper/UserSession.cpp
@@ -29,6 +29,7 @@
 #include "XAuth.h"
 
 #include <functional>
+#include <qlist.h>
 #include <sys/types.h>
 #include <sys/ioctl.h>
 #include <errno.h>
@@ -125,7 +126,6 @@ namespace SDDM {
                 qInfo() << "Starting Wayland user session:" << program() << m_path;
                 QProcess::start();
                 closeWriteChannel();
-                closeReadChannel(QProcess::StandardOutput);
             }
         } else {
             qCritical() << "Unable to run user session: unknown session type";
@@ -134,6 +134,8 @@ namespace SDDM {
         const bool started = waitForStarted();
         m_cachedProcessId = processId();
         if (started) {
+            connect(this, &QProcess::readyReadStandardError, this, &UserSession::logStderr);
+            connect(this, &QProcess::readyReadStandardOutput, this, &UserSession::logStdout);
             return true;
         } else if (isWaylandGreeter) {
             // This is probably fine, we need the compositor to start first
@@ -145,6 +147,8 @@ namespace SDDM {
 
     void UserSession::stop()
     {
+        disconnect(this, &QProcess::readyReadStandardError, this, &UserSession::logStderr);
+        disconnect(this, &QProcess::readyReadStandardOutput, this, &UserSession::logStdout);
         if (state() != QProcess::NotRunning) {
             terminate();
             const bool isGreeter = processEnvironment().value(QStringLiteral("XDG_SESSION_CLASS")) == QLatin1String("greeter");
@@ -372,16 +376,28 @@ namespace SDDM {
             } else {
                 qWarning() << "Could not open stderr to" << sessionLog;
             }
+        }
+    }
 
-            //redirect any stdout to /dev/null
-            fd = ::open("/dev/null", O_WRONLY);
-            if (fd >= 0)
-            {
-                dup2 (fd, STDOUT_FILENO);
-                ::close(fd);
-            } else {
-                qWarning() << "Could not redirect stdout";
-            }
+    void UserSession::logStderr() {
+        QList<QByteArray> lines = readAllStandardError().split('\n');
+
+        for (qsizetype i = 0; i < lines.size(); ++i) {
+            QByteArray line = lines.at(i);
+
+            if (!line.isEmpty())
+                qWarning().noquote() << QByteArray("[Session] " + line).trimmed();
+        }
+    }
+
+    void UserSession::logStdout() {
+        QList<QByteArray> lines = readAllStandardOutput().split('\n');
+
+        for (qsizetype i = 0; i < lines.size(); ++i) {
+            QByteArray line = lines.at(i);
+
+            if (!line.isEmpty())
+                qInfo().noquote() << QByteArray("[Session] " + line).trimmed();
         }
     }
 
diff --git a/src/helper/UserSession.h b/src/helper/UserSession.h
index ecaef86..bebbbf0 100644
--- a/src/helper/UserSession.h
+++ b/src/helper/UserSession.h
@@ -25,6 +25,7 @@
 #include <QtCore/QObject>
 #include <QtCore/QProcess>
 #include <QtCore/QTemporaryFile>
+#include <qobjectdefs.h>
 
 namespace SDDM {
     class HelperApp;
@@ -60,6 +61,10 @@ namespace SDDM {
         void setupChildProcess() override;
 #endif
 
+    private slots:
+        void logStdout();
+        void logStderr();
+
     private:
         void setup();
 
-- 
2.49.0

